[Q]. RandomizedsearchCV


While GridSearchCV tries every possible combination of hyperparameters from the grid, RandomizedSearchCV takes a more efficient approach by randomly sampling a fixed number of parameter combinations. This makes it faster for large datasets and parameter grids, while still giving a good chance of finding an optimal set of parameters.

Think of it like hunting for treasure: instead of digging everywhere, we dig in a few random spots, but still manage to find the gold most of the time! 🏴‍☠️

Key Differences Between GridSearchCV and RandomizedSearchCV:
👉 GridSearchCV exhaustively searches all combinations.
👉 RandomizedSearchCV samples a fixed number of random combinations from the grid.
👉 RandomizedSearchCV is faster but may not explore all possible combinations.

> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <> - <
								Now let's dive into the parameters of RandomizedsearchCV 🎉

[a]. estimator 🧑‍🏫:
	What it does: The machine learning model you want to fine-tune.

[b]. param_distributions 🎯:
	Parameters which you want to tune.

[c]. n_iter [10] 🔄: 
	Number of random combinations to try. Instead of exploring all combinations, you randomly sample a fixed number.

[d]. scoring 🏅:
	Defines the metric to evaluate the model’s performance. It can be a string (like 'accuracy', 'neg_mean_squared_error'), or a custom scorer created with 'make_scorer'.

[e]. n_jobs [None] 🪸:
	Number of cpu cores to use for computations.
	-1 : All cores
	None : 1

[f]. cv [5] 📏:
	What it does: Number of cross-validation folds or a custom cross-validation strategy.
	10 : (10-fold cross-validation)

[g]. verbose [0] 📢:
	What it does: Controls how much information is printed during the search.
	Default: 0 (no output)
	Example: verbose=1 will print basic progress updates. 

[h]. random_state [None] 🎲:
	What it does: Sets the seed for random number generation to ensure reproducibility of results.
	Default: None
	Example: random_state=42 for consistent random results.

[i]. error_score [np.nan]🚨:
	Defines what to do if a parameter combination causes an error. You can set it to 'raise' to throw the error or to a specific value like 0.0 to assign that value as the score for failed fits.
	Default: np.nan (assigns NaN for any errors)
	Example: error_score=0 to give a score of 0 for models that raise errors.

[j]. return_train_score [false] 🎓:
	Whether or not to return the training scores in addition to the validation scores.
	Default: False
	Example: return_train_score=True if you want training scores included in the results.

[k]. pre_dispatch [2*n_jobs] 📦:
	Controls the number of jobs to dispatch during parallel execution.
	Default: '2*n_jobs'
	Example: For controlling how many models are evaluated at the same time, especially useful in large datasets.

[l]. refit [true] 🏆:
	After finding the best parameter combination, it refits the estimator on the entire dataset using the best-found parameters.
	Default: True
	Example: If set to False, the best model is not automatically refit on the entire dataset.
